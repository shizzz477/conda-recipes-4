Index: src/CMakeLists.txt
===================================================================
--- src/CMakeLists.txt	(revision 0)
+++ src/CMakeLists.txt	(revision 1081)
@@ -0,0 +1,16 @@
+file(GLOB_RECURSE cfiles "*.c")
+
+configure_file("mdt_version.c.in"
+               "${PROJECT_BINARY_DIR}/src/mdt_version.c")
+list(APPEND cfiles "${PROJECT_BINARY_DIR}/src/mdt_version.c")
+
+include_directories(".")
+add_library(mdt-lib SHARED ${cfiles})
+set_target_properties(mdt-lib PROPERTIES
+                      RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib"
+                      OUTPUT_NAME "mdt")
+set_property(TARGET mdt-lib PROPERTY COMPILE_DEFINITIONS
+             "MDT_EXPORTS;MDT_SIZEOF_POINTER=${CMAKE_SIZEOF_VOID_P}")
+target_link_libraries(mdt-lib
+                      ${EXTRA_LIBS})
+INSTALL(TARGETS mdt-lib DESTINATION ${CMAKE_INSTALL_LIBDIR})
Index: data/CMakeLists.txt
===================================================================
--- data/CMakeLists.txt	(revision 0)
+++ data/CMakeLists.txt	(revision 1081)
@@ -0,0 +1,4 @@
+set(FILES "anggrp.lib" "bndgrp.lib" "impgrp.lib" "trpcls.lib" "dblcls.lib"
+          "atmcls-hbda.lib")
+
+INSTALL(FILES ${FILES} DESTINATION "${CMAKE_INSTALL_DATADIR}")
Index: pyext/SConscript
===================================================================
--- pyext/SConscript	(revision 1067)
+++ pyext/SConscript	(working copy)
@@ -24,6 +24,8 @@
 
 e.Append(LIBPATH=['../src'])
 e.Append(LIBS=['mdt'])
+e.Append(CPPPATH=['../src'])
+e.Append(SWIGPATH=['../src'])
 
 # Build the Python extension from SWIG interface file:
 pyso = e.LoadableModule('_mdt', 'mdt.i',
Index: pyext/mdt.i
===================================================================
--- pyext/mdt.i	(revision 1067)
+++ pyext/mdt.i	(working copy)
@@ -1,11 +1,11 @@
-%module _mdt
+%module mdt
 %include "typemaps.i"
 
 %{
 #include <glib.h>
-#include "../src/mdt.h"
-#include "../src/mdt_feature.h"
-#include "../src/mdt_all_features.h"
+#include "mdt.h"
+#include "mdt_feature.h"
+#include "mdt_all_features.h"
 #include "modeller.h"
 %}
 
@@ -32,9 +32,9 @@
 %apply (const int VARLIST[], int N_VARLIST) { (const int indices[], int n_indices) };
 %apply (const int VARLIST[], int N_VARLIST) { (const int chunk_size[], int n_chunk_size) };
 
-%include "../src/mdt.h"
-%include "../src/mdt_alignment.h"
-%include "../src/mdt_all_features.h"
+%include "mdt.h"
+%include "mdt_alignment.h"
+%include "mdt_all_features.h"
 
 /* Wrap MDT types */
 %include "mdt_type.i"
Index: pyext/CMakeLists.txt
===================================================================
--- pyext/CMakeLists.txt	(revision 0)
+++ pyext/CMakeLists.txt	(revision 1081)
@@ -0,0 +1,42 @@
+find_package(SWIG 1.3.40 REQUIRED)
+include(${SWIG_USE_FILE})
+
+find_package(PythonInterp 2.4 REQUIRED)
+find_package(PythonLibs ${PYTHON_VERSION_STRING} EXACT REQUIRED)
+
+find_package(NumPy)
+if(NUMPY_FOUND)
+  include_directories(${NUMPY_INCLUDE_DIRS})
+  add_definitions("-DMDT_WITH_NUMPY")
+endif()
+
+INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_DIRS})
+include_directories(BEFORE "${PROJECT_SOURCE_DIR}/src")
+
+FILE(GLOB SWIG_INCLUDES "*.i")
+
+SET(CMAKE_SWIG_FLAGS "-nodefaultctor" "-nodefaultdtor")
+SET(SWIG_MODULE_mdt_EXTRA_DEPS ${SWIG_INCLUDES})
+
+SWIG_ADD_MODULE(mdt PYTHON mdt.i)
+
+if(APPLE)
+  set_target_properties("${SWIG_MODULE_mdt_REAL_NAME}" PROPERTIES LINK_FLAGS "-flat_namespace -undefined suppress")
+endif(APPLE)
+
+# Don't link in libpython (that prevents the extension from being used in
+# later compatible versions of Python), except on Windows where all DLL
+# symbols must be defined
+IF(WIN32)
+  SWIG_LINK_LIBRARIES(mdt ${PYTHON_LIBRARIES} mdt-lib)
+ELSE(WIN32)
+  SWIG_LINK_LIBRARIES(mdt mdt-lib)
+ENDIF(WIN32)
+
+set_target_properties("${SWIG_MODULE_mdt_REAL_NAME}"
+                      PROPERTIES
+                      RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib")
+
+INSTALL(TARGETS ${SWIG_MODULE_mdt_REAL_NAME} DESTINATION ${CMAKE_INSTALL_PYTHONDIR})
+INSTALL(FILES "mdt/__init__.py" DESTINATION "${CMAKE_INSTALL_PYTHONDIR}/mdt/")
+INSTALL(FILES "mdt/features.py" DESTINATION "${CMAKE_INSTALL_PYTHONDIR}/mdt/")
Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(revision 0)
+++ CMakeLists.txt	(revision 1081)
@@ -0,0 +1,32 @@
+cmake_minimum_required(VERSION 2.8)
+project(MDT)
+
+set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/cmake_modules)
+
+set(MDT_VERSION "SVN")
+
+# Use @rpath on Mac by default
+if(POLICY CMP0042)
+cmake_policy(SET CMP0042 NEW)
+endif(POLICY CMP0042)
+
+include(GNUInstallDirs)
+if (NOT DEFINED CMAKE_INSTALL_PYTHONDIR)
+  set(CMAKE_INSTALL_PYTHONDIR "${CMAKE_INSTALL_LIBDIR}/python/site_packages")
+endif()
+
+find_package(HDF5 1.8 REQUIRED COMPONENTS C HL)
+set(EXTRA_LIBS ${EXTRA_LIBS} ${HDF5_LIBRARIES})
+include_directories(${HDF5_INCLUDE_DIRS})
+
+find_package(GLIB REQUIRED)
+set(EXTRA_LIBS ${EXTRA_LIBS} ${GLIB_LIBRARIES})
+include_directories(${GLIB_INCLUDE_DIRS})
+
+find_package(MODELLER REQUIRED)
+set(EXTRA_LIBS ${EXTRA_LIBS} ${MODELLER_LIBRARIES})
+include_directories(${MODELLER_INCLUDE_DIRS})
+
+add_subdirectory(src)
+add_subdirectory(pyext)
+add_subdirectory(data)
Index: cmake_modules/FindGLIB.cmake
===================================================================
--- cmake_modules/FindGLIB.cmake	(revision 0)
+++ cmake_modules/FindGLIB.cmake	(revision 1081)
@@ -0,0 +1,120 @@
+# - Try to find Glib and its components (gio, gobject etc)
+# Once done, this will define
+#
+#  GLIB_FOUND - system has Glib
+#  GLIB_INCLUDE_DIRS - the Glib include directories
+#  GLIB_LIBRARIES - link these to use Glib
+#
+# Optionally, the COMPONENTS keyword can be passed to find_package()
+# and Glib components can be looked for.  Currently, the following
+# components can be used, and they define the following variables if
+# found:
+#
+#  gio:             GLIB_GIO_LIBRARIES
+#  gobject:         GLIB_GOBJECT_LIBRARIES
+#  gmodule:         GLIB_GMODULE_LIBRARIES
+#  gthread:         GLIB_GTHREAD_LIBRARIES
+#
+# Note that the respective _INCLUDE_DIR variables are not set, since
+# all headers are in the same directory as GLIB_INCLUDE_DIRS.
+#
+# Copyright (C) 2012 Raphael Kubo da Costa <rakuco@webkit.org>
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 1.  Redistributions of source code must retain the above copyright
+#     notice, this list of conditions and the following disclaimer.
+# 2.  Redistributions in binary form must reproduce the above copyright
+#     notice, this list of conditions and the following disclaimer in the
+#     documentation and/or other materials provided with the distribution.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND ITS CONTRIBUTORS ``AS
+# IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ITS
+# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
+# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+find_package(PkgConfig)
+pkg_check_modules(PC_GLIB QUIET glib-2.0)
+
+find_library(GLIB_LIBRARIES
+    NAMES glib-2.0
+    HINTS ${PC_GLIB_LIBDIR}
+          ${PC_GLIB_LIBRARY_DIRS}
+)
+
+# Files in glib's main include path may include glibconfig.h, which,
+# for some odd reason, is normally in $LIBDIR/glib-2.0/include.
+get_filename_component(_GLIB_LIBRARY_DIR ${GLIB_LIBRARIES} PATH)
+find_path(GLIBCONFIG_INCLUDE_DIR
+    NAMES glibconfig.h
+    HINTS ${PC_LIBDIR} ${PC_LIBRARY_DIRS} ${_GLIB_LIBRARY_DIR}
+          ${PC_GLIB_INCLUDEDIR} ${PC_GLIB_INCLUDE_DIRS}
+    PATH_SUFFIXES glib-2.0/include
+)
+
+find_path(GLIB_INCLUDE_DIR
+    NAMES glib.h
+    HINTS ${PC_GLIB_INCLUDEDIR}
+          ${PC_GLIB_INCLUDE_DIRS}
+    PATH_SUFFIXES glib-2.0
+)
+
+set(GLIB_INCLUDE_DIRS ${GLIB_INCLUDE_DIR} ${GLIBCONFIG_INCLUDE_DIR})
+
+# Version detection
+file(READ "${GLIBCONFIG_INCLUDE_DIR}/glibconfig.h" GLIBCONFIG_H_CONTENTS)
+string(REGEX MATCH "#define GLIB_MAJOR_VERSION ([0-9]+)" _dummy "${GLIBCONFIG_H_CONTENTS}")
+set(GLIB_VERSION_MAJOR "${CMAKE_MATCH_1}")
+string(REGEX MATCH "#define GLIB_MINOR_VERSION ([0-9]+)" _dummy "${GLIBCONFIG_H_CONTENTS}")
+set(GLIB_VERSION_MINOR "${CMAKE_MATCH_1}")
+string(REGEX MATCH "#define GLIB_MICRO_VERSION ([0-9]+)" _dummy "${GLIBCONFIG_H_CONTENTS}")
+set(GLIB_VERSION_MICRO "${CMAKE_MATCH_1}")
+set(GLIB_VERSION "${GLIB_VERSION_MAJOR}.${GLIB_VERSION_MINOR}.${GLIB_VERSION_MICRO}")
+
+# Additional Glib components.  We only look for libraries, as not all of them
+# have corresponding headers and all headers are installed alongside the main
+# glib ones.
+foreach (_component ${GLIB_FIND_COMPONENTS})
+    if (${_component} STREQUAL "gio")
+        find_library(GLIB_GIO_LIBRARIES NAMES gio-2.0 HINTS ${_GLIB_LIBRARY_DIR})
+        set(ADDITIONAL_REQUIRED_VARS ${ADDITIONAL_REQUIRED_VARS} GLIB_GIO_LIBRARIES)
+    elseif (${_component} STREQUAL "gobject")
+        find_library(GLIB_GOBJECT_LIBRARIES NAMES gobject-2.0 HINTS ${_GLIB_LIBRARY_DIR})
+        set(ADDITIONAL_REQUIRED_VARS ${ADDITIONAL_REQUIRED_VARS} GLIB_GOBJECT_LIBRARIES)
+    elseif (${_component} STREQUAL "gmodule")
+        find_library(GLIB_GMODULE_LIBRARIES NAMES gmodule-2.0 HINTS ${_GLIB_LIBRARY_DIR})
+        set(ADDITIONAL_REQUIRED_VARS ${ADDITIONAL_REQUIRED_VARS} GLIB_GMODULE_LIBRARIES)
+    elseif (${_component} STREQUAL "gthread")
+        find_library(GLIB_GTHREAD_LIBRARIES NAMES gthread-2.0 HINTS ${_GLIB_LIBRARY_DIR})
+        set(ADDITIONAL_REQUIRED_VARS ${ADDITIONAL_REQUIRED_VARS} GLIB_GTHREAD_LIBRARIES)
+    elseif (${_component} STREQUAL "gio-unix")
+        # gio-unix is compiled as part of the gio library, but the include paths
+        # are separate from the shared glib ones. Since this is currently only used
+        # by WebKitGTK+ we don't go to extraordinary measures beyond pkg-config.
+        pkg_check_modules(GIO_UNIX QUIET gio-unix-2.0)
+    endif ()
+endforeach ()
+
+include(FindPackageHandleStandardArgs)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(GLIB REQUIRED_VARS GLIB_INCLUDE_DIRS GLIB_LIBRARIES ${ADDITIONAL_REQUIRED_VARS}
+                                       VERSION_VAR   GLIB_VERSION)
+
+mark_as_advanced(
+    GLIBCONFIG_INCLUDE_DIR
+    GLIB_GIO_LIBRARIES
+    GLIB_GIO_UNIX_LIBRARIES
+    GLIB_GMODULE_LIBRARIES
+    GLIB_GOBJECT_LIBRARIES
+    GLIB_GTHREAD_LIBRARIES
+    GLIB_INCLUDE_DIR
+    GLIB_INCLUDE_DIRS
+    GLIB_LIBRARIES
+)
Index: cmake_modules/FindMODELLER.cmake
===================================================================
--- cmake_modules/FindMODELLER.cmake	(revision 0)
+++ cmake_modules/FindMODELLER.cmake	(revision 1082)
@@ -0,0 +1,43 @@
+# - Try to find Modeller
+# Once done, this will define
+#
+#  MODELLER_FOUND - system has Modeller
+#  MODELLER_INCLUDE_DIRS - the Modeller include directories
+#  MODELLER_LIBRARIES - link these to use Modeller
+
+find_package(PkgConfig)
+pkg_check_modules(PC_MODELLER QUIET modeller)
+
+find_library(MODELLER_LIBRARIES
+    NAMES modeller
+    HINTS ${PC_MODELLER_LIBDIR}
+          ${PC_MODELLER_LIBRARY_DIRS}
+)
+
+find_path(MODELLER_INCLUDE_DIR
+    NAMES modeller.h
+    HINTS ${PC_MODELLER_INCLUDEDIR}
+          ${PC_MODELLER_INCLUDE_DIRS}
+    PATH_SUFFIXES modeller
+)
+
+find_path(MODELLER_ARCH_INCLUDE_DIR
+    NAMES fortran-pointer-types.h
+    HINTS ${PC_MODELLER_INCLUDEDIR}
+          ${PC_MODELLER_INCLUDE_DIRS}
+    PATH_SUFFIXES modeller
+)
+set(MODELLER_INCLUDE_DIRS ${MODELLER_INCLUDE_DIR} ${MODELLER_ARCH_INCLUDE_DIR})
+
+include(FindPackageHandleStandardArgs)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(MODELLER REQUIRED_VARS MODELLER_INCLUDE_DIRS
+                MODELLER_LIBRARIES ${ADDITIONAL_REQUIRED_VARS})
+
+# Get all -L flags found by pkg-config; on the Mac at least we can't
+# link against Modeller successfully unless we add these.
+set(MODELLER_LDFLAGS "")
+foreach(flag ${PC_MODELLER_LDFLAGS})
+  if(${flag} MATCHES "^-L")
+    list(APPEND MODELLER_LIBRARIES ${flag})
+  endif()
+endforeach()
Index: cmake_modules/FindNumPy.cmake
===================================================================
--- cmake_modules/FindNumPy.cmake	(revision 0)
+++ cmake_modules/FindNumPy.cmake	(revision 1081)
@@ -0,0 +1,102 @@
+# - Find the NumPy libraries
+# This module finds if NumPy is installed, and sets the following variables
+# indicating where it is.
+#
+# TODO: Update to provide the libraries and paths for linking npymath lib.
+#
+#  NUMPY_FOUND               - was NumPy found
+#  NUMPY_VERSION             - the version of NumPy found as a string
+#  NUMPY_VERSION_MAJOR       - the major version number of NumPy
+#  NUMPY_VERSION_MINOR       - the minor version number of NumPy
+#  NUMPY_VERSION_PATCH       - the patch version number of NumPy
+#  NUMPY_VERSION_DECIMAL     - e.g. version 1.6.1 is 10601
+#  NUMPY_INCLUDE_DIRS        - path to the NumPy include files
+
+#============================================================================
+# Copyright 2012 Continuum Analytics, Inc.
+#
+# MIT License
+#
+# Permission is hereby granted, free of charge, to any person obtaining
+# a copy of this software and associated documentation files
+# (the "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Software, and to permit
+# persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+#
+# The above copyright notice and this permission notice shall be included
+# in all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+# OTHER DEALINGS IN THE SOFTWARE.
+#
+#============================================================================
+
+# Finding NumPy involves calling the Python interpreter
+if(NumPy_FIND_REQUIRED)
+    find_package(PythonInterp REQUIRED)
+else()
+    find_package(PythonInterp)
+endif()
+
+if(NOT PYTHONINTERP_FOUND)
+    set(NUMPY_FOUND FALSE)
+    return()
+endif()
+
+execute_process(COMMAND "${PYTHON_EXECUTABLE}" "-c"
+    "import numpy as n; print(n.__version__); print(n.get_include());"
+    RESULT_VARIABLE _NUMPY_SEARCH_SUCCESS
+    OUTPUT_VARIABLE _NUMPY_VALUES_OUTPUT
+    ERROR_VARIABLE _NUMPY_ERROR_VALUE
+    OUTPUT_STRIP_TRAILING_WHITESPACE)
+
+if(NOT _NUMPY_SEARCH_SUCCESS MATCHES 0)
+    if(NumPy_FIND_REQUIRED)
+        message(FATAL_ERROR
+            "NumPy import failure:\n${_NUMPY_ERROR_VALUE}")
+    endif()
+    set(NUMPY_FOUND FALSE)
+    return()
+endif()
+
+# Convert the process output into a list
+string(REGEX REPLACE ";" "\\\\;" _NUMPY_VALUES ${_NUMPY_VALUES_OUTPUT})
+string(REGEX REPLACE "\n" ";" _NUMPY_VALUES ${_NUMPY_VALUES})
+# Just in case there is unexpected output from the Python command.
+list(GET _NUMPY_VALUES -2 NUMPY_VERSION)
+list(GET _NUMPY_VALUES -1 NUMPY_INCLUDE_DIRS)
+
+string(REGEX MATCH "^[0-9]+\\.[0-9]+\\.[0-9]+" _VER_CHECK "${NUMPY_VERSION}")
+if("${_VER_CHECK}" STREQUAL "")
+    # The output from Python was unexpected. Raise an error always
+    # here, because we found NumPy, but it appears to be corrupted somehow.
+    message(FATAL_ERROR
+        "Requested version and include path from NumPy, got instead:\n${_NUMPY_VALUES_OUTPUT}\n")
+    return()
+endif()
+
+# Make sure all directory separators are '/'
+string(REGEX REPLACE "\\\\" "/" NUMPY_INCLUDE_DIRS ${NUMPY_INCLUDE_DIRS})
+
+# Get the major and minor version numbers
+string(REGEX REPLACE "\\." ";" _NUMPY_VERSION_LIST ${NUMPY_VERSION})
+list(GET _NUMPY_VERSION_LIST 0 NUMPY_VERSION_MAJOR)
+list(GET _NUMPY_VERSION_LIST 1 NUMPY_VERSION_MINOR)
+list(GET _NUMPY_VERSION_LIST 2 NUMPY_VERSION_PATCH)
+string(REGEX MATCH "[0-9]*" NUMPY_VERSION_PATCH ${NUMPY_VERSION_PATCH})
+math(EXPR NUMPY_VERSION_DECIMAL
+    "(${NUMPY_VERSION_MAJOR} * 10000) + (${NUMPY_VERSION_MINOR} * 100) + ${NUMPY_VERSION_PATCH}")
+
+find_package_message(NUMPY
+    "Found NumPy: version \"${NUMPY_VERSION}\" ${NUMPY_INCLUDE_DIRS}"
+    "${NUMPY_INCLUDE_DIRS}${NUMPY_VERSION}")
+
+set(NUMPY_FOUND TRUE)
+
